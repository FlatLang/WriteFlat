package "novex/writer/nova/nodes/variables"

import "nova/io/OutputStream"
import "novex/astro/tree/nodes/Node"
import "novex/astro/tree/nodes/Value"
import "novex/astro/tree/nodes/functions/BodyFunction"
import "novex/astro/tree/nodes/functions/PropertyFunction"
import "novex/astro/tree/nodes/functions/AccessorFunction"
import "novex/astro/tree/nodes/functions/MutatorFunction"
import "novex/astro/tree/nodes/operations/Assignable"
import "novex/astro/SyntaxErrorException"
import "novex/astro/SyntaxMessage"
import "novex/astro/util/Location"

import "novex/astro/util/CompilerStringFunctions"

class FieldDeclarationWriter extends InstanceDeclarationWriter implements AssignableWriter {
    public writeInitializationValue() => initializationValue ? " = #initializationValue.toNova()" : ""
    public writeAccessorValue() =>
        accessorValue ?
            (isTwoWayAccessor ? " <=> " : " => ") + accessorValue.toNova() :
            ""
    
    public writePropertyFunctions() => "" {
        if (accessor || mutator) {
            var output = " {"
            
            if (accessor) {
                output += "\n" + accessor.writeNova() + "\n"
            }
            if (mutator) {
                output += "\n" + mutator.writeNova() + "\n"
            }
            
            return output + "}"
        }
    }
    
    public writeNova() => super.writeNova() + writeInitializationValue() + writeAccessorValue() + writePropertyFunctions()
}