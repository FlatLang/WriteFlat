package "novex/writer/nova/nodes"

import "nova/io/OutputStream"
import "nova/io/StringBuilder"
import "nova/regex/Pattern"
import "nova/datastruct/list/ImmutableArray"

import "novex/astro/SyntaxErrorException"
import "novex/astro/InvalidParseException"
import "novex/astro/SyntaxMessage"
import "novex/astro/util/Location"
import "novex/astro/tree/nodes/generics/GenericParameter"
import "novex/astro/tree/nodes/generics/GenericCompatible"
import "novex/astro/tree/nodes/variables/InstanceDeclaration"
import "novex/astro/tree/nodes/variables/VariableDeclaration"
import "novex/astro/tree/nodes/variables/FieldDeclaration"
import "novex/astro/tree/nodes/variables/ArrayBracketOverload"
import "novex/astro/tree/nodes/functions/FunctionDeclaration"
import "novex/astro/tree/nodes/functions/Constructor"
import "novex/astro/tree/nodes/functions/BodyFunction"

import "novex/astro/util/CompilerStringFunctions"

/// @InstanceDeclaration extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class ClassDeclarationWriter {
    public writeHeader(OutputStream writer = new StringBuilder()) =>
        writer.write("#identifier #{name}#writeGenericParameters() #writeExtension() #writeImplementedInterfaces()".replace(/\s+/, " ").trim())
    
    public writeExtension(OutputStream writer = new StringBuilder()) =>
        extendedClass ?
            writer.write("extends #extendedClass") :
            writer
    
    public writeImplementedInterfaces(OutputStream writer = new StringBuilder()) =>
        implementedInterfaces.count > 0 ?
            writer.write("implements #{implementedInterfaces.join(", ")}") :
            writer
    
    public writeArrayBracketOverload(OutputStream writer = new StringBuilder()) =>
        arrayBracketOverload ?
            writer.write("\n" + arrayBracketOverload.toNova() + "\n") :
            writer
    
    public writeFields(OutputStream writer = new StringBuilder()) => writer.write(fields.map({ '\n' + _.toNova() }).join() + (fields.count > 0 ? "\n" : ""))
    public writeFunctions(OutputStream writer = new StringBuilder()) => writer.write(functions.map({ '\n' + _.toNova() + '\n' }).join())
    
    public toNova(OutputStream writer = new StringBuilder()) => writer {
        writeHeader(writer).write(" {")
        writeArrayBracketOverload(writer)
        writeFields(writer)
        writeFunctions(writer).write("}")
    }
    
    [Override]
    public toString() => writeHeader().toString()
}