package "novex/writer/nova/nodes"

import "nova/regex/Pattern"
import "nova/datastruct/list/ImmutableArray"

import "novex/astro/SyntaxErrorException"
import "novex/astro/InvalidParseException"
import "novex/astro/SyntaxMessage"
import "novex/astro/util/Location"
import "novex/astro/tree/nodes/generics/GenericParameter"
import "novex/astro/tree/nodes/generics/GenericCompatible"
import "novex/astro/tree/nodes/variables/InstanceDeclaration"
import "novex/astro/tree/nodes/variables/VariableDeclaration"
import "novex/astro/tree/nodes/variables/FieldDeclaration"
import "novex/astro/tree/nodes/variables/ArrayBracketOverload"
import "novex/astro/tree/nodes/functions/FunctionDeclaration"
import "novex/astro/tree/nodes/functions/Constructor"
import "novex/astro/tree/nodes/functions/BodyFunction"

import "novex/astro/util/CompilerStringFunctions"

/// @InstanceDeclaration extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class ClassDeclarationWriter extends InstanceDeclarationWriter implements AbstractableWriter, GenericCompatibleWriter {
    public writeHeader() =>
        "#identifier #{name}#writeGenericParameters() #writeExtension() #writeImplementedInterfaces()".replace(/\s+/, " ").trim()
    
    public writeExtension() =>
        extendedClass ?
            "extends #extendedClass" :
            ""
    
    public writeImplementedInterfaces() =>
        implementedInterfaces.count > 0 ?
            "implements #{implementedInterfaces.join(", ")}" :
            ""
    
    public writeArrayBracketOverload() =>
        arrayBracketOverload ?
            "\n" + arrayBracketOverload.toNova() + "\n" :
            ""
    
    public writeFields() => fields.map({ '\n' + _.toNova() }).join() + (fields.count > 0 ? "\n" : "")
    public writeFunctions() => functions.map({ '\n' + _.toNova() + '\n' }).join()
    
    public toNova() =>
        writeHeader() + " {" +
        writeArrayBracketOverload() +
        writeFields() +
        writeFunctions() + "}"
    
    [Override]
    public toString() => writeHeader()
}